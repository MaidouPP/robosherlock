#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Fri Oct 16 13:34:29 2015

@author: Ferenc Balint-Benczedi
"""
import sys
import rospkg
import os.path

XMLDEF_PATH = "/descriptors/annotators/"
SOURCE_PATH = "/src/"


def create_xml_def(pathToPackage,annotatorName):
    pathToXmlLocation = pathToPackage+XMLDEF_PATH
    xmlFileName = annotatorName+".xml"
    if os.path.isfile(pathToXmlLocation+xmlFileName):
        print "An Annotator with the name "+annotatorName+" already exists in "+pathToXmlLocation+".!"
        return()
    libName = "rs_"+annotatorName[:1].lower() + annotatorName[1:]
    print ("Creating "+xmlFileName+" in "+ pathToXmlLocation)
    f = open(pathToXmlLocation+xmlFileName, 'w')
    txt = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
           "<taeDescription xmlns=\"http://uima.apache.org/resourceSpecifier\">\n"
           "  <frameworkImplementation>org.apache.uima.cpp</frameworkImplementation>\n"
           "  <primitive>true</primitive>\n"
           "  <annotatorImplementationName>"+libName+"</annotatorImplementationName>\n"
           "  <analysisEngineMetaData>\n"
           "    <name>"+annotatorName+"</name>\n"
           "    <description/>\n"
           "    <version>1.0</version>\n"
           "    <vendor/>\n"
           "    <configurationParameters>\n"
           "        <configurationParameter>\n"
           "            <name>test_param</name>\n"
           "            <type>Float</type>\n"
           "            <multiValued>false</multiValued>\n"
           "            <mandatory>false</mandatory>\n"
           "        </configurationParameter>\n"
           "    </configurationParameters>\n"
           "    <configurationParameterSettings>\n"
           "        <nameValuePair>\n"
           "            <name>test_param</name>\n"
           "            <value>\n"
           "                <float>0.01</float>\n"
           "            </value>\n"
           "        </nameValuePair>\n"
           "    </configurationParameterSettings>\n"
           "    <typeSystemDescription>\n"
           "        <imports>\n"
           "            <import location=\"../typesystem/all_types.xml\"/>\n"
           "        </imports>\n"
           "    </typeSystemDescription>\n"
           "    <capabilities>\n"
           "        <capability>\n"
           "            <inputs/>\n"
           "            <outputs/>\n"
           "            <languagesSupported>\n"
           "                <language>x-unspecified</language>\n"
           "            </languagesSupported>\n"
           "        </capability>\n"
           "    </capabilities>\n"
           "    <operationalProperties>\n"
           "        <modifiesCas>true</modifiesCas>\n"
           "        <multipleDeploymentAllowed>true</multipleDeploymentAllowed>\n"
           "        <outputsNewCASes>false</outputsNewCASes>\n"
           "    </operationalProperties>\n"
           "  </analysisEngineMetaData>\n"
           "</taeDescription>")
    f.write(txt)
    f.close()
    
def create_cpp_source(pathToPackage,annotatorName):
    pathToCppLocation = pathToPackage+SOURCE_PATH
    cppFileName = annotatorName+".cpp"
    if os.path.isfile(pathToCppLocation+cppFileName):
        print "An Annotator with the name "+annotatorName+" already exists in "+pathToCppLocation+". Terminating!"
        return
    print ("Creating "+cppFileName+" in "+ pathToCppLocation)
    f = open(pathToCppLocation+cppFileName, 'w')
    txt = ("#include <uima/api.hpp>\n\n"
           "#include <pcl/point_types.h>\n"
           "#include <rs/types/all_types.h>\n"
           "//RS\n"
           "#include <rs/scene_cas.h>\n"
           "#include <rs/utils/time.h>\n\n"
           "using namespace uima;\n\n\n"
           "class "+annotatorName+" : public Annotator\n{\n"
           "private:\n"
           "  float test_param;\n\n"
           "public:\n\n"
           "  TyErrorId initialize(AnnotatorContext &ctx)\n"
           "  {\n"
           "    outInfo(\"initialize\");\n"
           "    ctx.extractValue(\"test_param\", test_param);\n"
           "    return UIMA_ERR_NONE;\n"
           "  }\n\n"
           "  TyErrorId destroy()\n"
           "  {\n"
           "    outInfo(\"destroy\");\n"
           "    return UIMA_ERR_NONE;\n"
           "  }\n\n"
           "  TyErrorId process(CAS &tcas, ResultSpecification const &res_spec)\n"
           "  {\n"
           "    outInfo(\"process start\");\n"
           "    rs::StopWatch clock;\n"
           "    rs::SceneCas cas(tcas);\n"
           "    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cloud_ptr(new pcl::PointCloud<pcl::PointXYZRGBA>);\n"
           "    outInfo(\"Test param =  \" << test_param);\n"
           "    cas.get(VIEW_CLOUD,*cloud_ptr);\n\n"
           "    outInfo(\"Cloud size: \" << cloud_ptr->points.size());\n"
           "    outInfo(\"took: \" << clock.getTime() << \" ms.\");\n"
           "    return UIMA_ERR_NONE;\n"
           "  }\n"
           "};\n\n"
           "// This macro exports an entry point that is used to create the annotator.\n"
           "MAKE_AE("+annotatorName+")");
    f.write(txt)
    f.close()
    
if __name__ == "__main__":

    if len(sys.argv) < 3:
        print ("Not enought arguments. Terminating.")
        print ("Syntax is : rs_new_annotator <package_name> <annotator_name>")
        exit()
    packageName = sys.argv[1];
    annotatorName = sys.argv[2];
    
    rospack = rospkg.RosPack()
    package_names = rospack.get_depends_on('robosherlock')
    if packageName not in package_names and packageName != "robosherlock":
        print ("First argument is not a valid ROS package. Terminating")
        exit()
    create_xml_def(rospack.get_path(packageName),annotatorName)
    create_cpp_source(rospack.get_path(packageName),annotatorName)
